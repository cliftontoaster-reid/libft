name: Libft Compiler Matrix Testing

on: [push, fork]

jobs:
  francinette-tests:
    name: Francinette (${{ matrix.os }} - ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, ubuntu-latest]
        compiler: [clang, gcc, cc]
        include:
          - os: ubuntu-22.04
            compiler: clang
            cc_package: clang
          - os: ubuntu-22.04
            compiler: gcc
            cc_package: gcc
          - os: ubuntu-22.04
            compiler: cc
            cc_package: gcc
          - os: ubuntu-20.04
            compiler: clang
            cc_package: clang
          - os: ubuntu-20.04
            compiler: gcc
            cc_package: gcc
          - os: ubuntu-20.04
            compiler: cc
            cc_package: gcc
          - os: ubuntu-latest
            compiler: clang
            cc_package: clang
          - os: ubuntu-latest
            compiler: gcc
            cc_package: gcc
          - os: ubuntu-latest
            compiler: cc
            cc_package: gcc
    env:
      CC: ${{ matrix.compiler }}
      PYTHON_VERSION: 3.10
      FRANCINETTE_HOME: ${{ github.workspace }}/francinette

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ${{ env.FRANCINETTE_HOME }}/venv
            libft.a
          key: ${{ runner.os }}-${{ matrix.compiler }}-python-${{ env.PYTHON_VERSION }}-francinette-${{ hashFiles('**/requirements.txt', 'Makefile') }}

      - name: Setup toolchain
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update -qq
            sudo apt-get install -yq --no-install-recommends \
              ${{ matrix.cc_package }} \
              libbsd-dev libncurses-dev valgrind
          elif [[ "$RUNNER_OS" == "Darwin" ]]; then
            brew update
            brew install ${{ matrix.cc_package }} libbsd libncurses || true
            # Note: Valgrind is not officially supported on macOS.
          fi

      - name: Build libft
        run: |
          make CC=${{ matrix.compiler }} re

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Bootstrap Francinette
        run: |
          if [ ! -d "$FRANCINETTE_HOME" ]; then
            git clone --depth 1 --recursive \
              https://github.com/xicodomingues/francinette.git \
              $FRANCINETTE_HOME
          fi

          cd $FRANCINETTE_HOME
          git submodule update --init --recursive

          if [ ! -d "venv" ]; then
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip wheel
            pip install -r requirements.txt norminette
          else:
            . venv/bin/activate
          fi

      - name: Run compiler-specific tests
        run: |
          cd $FRANCINETTE_HOME
          . venv/bin/activate
          ./tester.sh --strict --compiler ${{ matrix.compiler }} \
            --path ${{ github.workspace }}

      - name: Capture results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.compiler }}-francinette-results
          path: |
            ${{ env.FRANCINETTE_HOME }}/report.log
            ${{ env.FRANCINETTE_HOME }}/compiler_issues.md
          retention-days: 3
